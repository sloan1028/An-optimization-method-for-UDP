// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addressbook.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_addressbook_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_addressbook_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_addressbook_2eproto;
namespace tutorial {
class Gamer;
struct GamerDefaultTypeInternal;
extern GamerDefaultTypeInternal _Gamer_default_instance_;
class Person_State;
struct Person_StateDefaultTypeInternal;
extern Person_StateDefaultTypeInternal _Person_State_default_instance_;
class Person_State_Weapon;
struct Person_State_WeaponDefaultTypeInternal;
extern Person_State_WeaponDefaultTypeInternal _Person_State_Weapon_default_instance_;
class Person_State_Weapon2bulletEntry_DoNotUse;
struct Person_State_Weapon2bulletEntry_DoNotUseDefaultTypeInternal;
extern Person_State_Weapon2bulletEntry_DoNotUseDefaultTypeInternal _Person_State_Weapon2bulletEntry_DoNotUse_default_instance_;
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> ::tutorial::Gamer* Arena::CreateMaybeMessage<::tutorial::Gamer>(Arena*);
template<> ::tutorial::Person_State* Arena::CreateMaybeMessage<::tutorial::Person_State>(Arena*);
template<> ::tutorial::Person_State_Weapon* Arena::CreateMaybeMessage<::tutorial::Person_State_Weapon>(Arena*);
template<> ::tutorial::Person_State_Weapon2bulletEntry_DoNotUse* Arena::CreateMaybeMessage<::tutorial::Person_State_Weapon2bulletEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tutorial {

enum Person_State_Camp : int {
  Person_State_Camp_BLUE = 0,
  Person_State_Camp_RED = 1
};
bool Person_State_Camp_IsValid(int value);
constexpr Person_State_Camp Person_State_Camp_Camp_MIN = Person_State_Camp_BLUE;
constexpr Person_State_Camp Person_State_Camp_Camp_MAX = Person_State_Camp_RED;
constexpr int Person_State_Camp_Camp_ARRAYSIZE = Person_State_Camp_Camp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Person_State_Camp_descriptor();
template<typename T>
inline const std::string& Person_State_Camp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Person_State_Camp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Person_State_Camp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Person_State_Camp_descriptor(), enum_t_value);
}
inline bool Person_State_Camp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Person_State_Camp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Person_State_Camp>(
    Person_State_Camp_descriptor(), name, value);
}
// ===================================================================

class Person_State_Weapon2bulletEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Person_State_Weapon2bulletEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Person_State_Weapon2bulletEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  Person_State_Weapon2bulletEntry_DoNotUse();
  explicit constexpr Person_State_Weapon2bulletEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Person_State_Weapon2bulletEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Person_State_Weapon2bulletEntry_DoNotUse& other);
  static const Person_State_Weapon2bulletEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Person_State_Weapon2bulletEntry_DoNotUse*>(&_Person_State_Weapon2bulletEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tutorial.Person_State.Weapon2bulletEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Person_State_Weapon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Person_State.Weapon) */ {
 public:
  inline Person_State_Weapon() : Person_State_Weapon(nullptr) {}
  ~Person_State_Weapon() override;
  explicit constexpr Person_State_Weapon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Person_State_Weapon(const Person_State_Weapon& from);
  Person_State_Weapon(Person_State_Weapon&& from) noexcept
    : Person_State_Weapon() {
    *this = ::std::move(from);
  }

  inline Person_State_Weapon& operator=(const Person_State_Weapon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person_State_Weapon& operator=(Person_State_Weapon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person_State_Weapon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person_State_Weapon* internal_default_instance() {
    return reinterpret_cast<const Person_State_Weapon*>(
               &_Person_State_Weapon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Person_State_Weapon& a, Person_State_Weapon& b) {
    a.Swap(&b);
  }
  inline void Swap(Person_State_Weapon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person_State_Weapon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person_State_Weapon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Person_State_Weapon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Person_State_Weapon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Person_State_Weapon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person_State_Weapon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Person_State.Weapon";
  }
  protected:
  explicit Person_State_Weapon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponNameFieldNumber = 1,
    kBulletFieldNumber = 2,
  };
  // optional string Weapon_name = 1;
  bool has_weapon_name() const;
  private:
  bool _internal_has_weapon_name() const;
  public:
  void clear_weapon_name();
  const std::string& weapon_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_weapon_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_weapon_name();
  PROTOBUF_NODISCARD std::string* release_weapon_name();
  void set_allocated_weapon_name(std::string* weapon_name);
  private:
  const std::string& _internal_weapon_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_weapon_name(const std::string& value);
  std::string* _internal_mutable_weapon_name();
  public:

  // optional int32 bullet = 2;
  bool has_bullet() const;
  private:
  bool _internal_has_bullet() const;
  public:
  void clear_bullet();
  int32_t bullet() const;
  void set_bullet(int32_t value);
  private:
  int32_t _internal_bullet() const;
  void _internal_set_bullet(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.Person_State.Weapon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weapon_name_;
  int32_t bullet_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class Person_State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Person_State) */ {
 public:
  inline Person_State() : Person_State(nullptr) {}
  ~Person_State() override;
  explicit constexpr Person_State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Person_State(const Person_State& from);
  Person_State(Person_State&& from) noexcept
    : Person_State() {
    *this = ::std::move(from);
  }

  inline Person_State& operator=(const Person_State& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person_State& operator=(Person_State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person_State& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person_State* internal_default_instance() {
    return reinterpret_cast<const Person_State*>(
               &_Person_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Person_State& a, Person_State& b) {
    a.Swap(&b);
  }
  inline void Swap(Person_State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person_State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person_State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Person_State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Person_State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Person_State& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person_State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Person_State";
  }
  protected:
  explicit Person_State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Person_State_Weapon Weapon;

  typedef Person_State_Camp Camp;
  static constexpr Camp BLUE =
    Person_State_Camp_BLUE;
  static constexpr Camp RED =
    Person_State_Camp_RED;
  static inline bool Camp_IsValid(int value) {
    return Person_State_Camp_IsValid(value);
  }
  static constexpr Camp Camp_MIN =
    Person_State_Camp_Camp_MIN;
  static constexpr Camp Camp_MAX =
    Person_State_Camp_Camp_MAX;
  static constexpr int Camp_ARRAYSIZE =
    Person_State_Camp_Camp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Camp_descriptor() {
    return Person_State_Camp_descriptor();
  }
  template<typename T>
  static inline const std::string& Camp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Camp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Camp_Name.");
    return Person_State_Camp_Name(enum_t_value);
  }
  static inline bool Camp_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Camp* value) {
    return Person_State_Camp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWeapon2BulletFieldNumber = 4,
    kPlayerPositionFieldNumber = 5,
    kWeaponsFieldNumber = 8,
    kPlayerNameFieldNumber = 2,
    kCurrentWeaponFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kPlayerHpFieldNumber = 6,
    kPlayerArmorFieldNumber = 7,
  };
  // map<string, int32> weapon2bullet = 4;
  int weapon2bullet_size() const;
  private:
  int _internal_weapon2bullet_size() const;
  public:
  void clear_weapon2bullet();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_weapon2bullet() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_weapon2bullet();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      weapon2bullet() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_weapon2bullet();

  // repeated float player_position = 5;
  int player_position_size() const;
  private:
  int _internal_player_position_size() const;
  public:
  void clear_player_position();
  private:
  float _internal_player_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_player_position() const;
  void _internal_add_player_position(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_player_position();
  public:
  float player_position(int index) const;
  void set_player_position(int index, float value);
  void add_player_position(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      player_position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_player_position();

  // repeated .tutorial.Person_State.Weapon weapons = 8;
  int weapons_size() const;
  private:
  int _internal_weapons_size() const;
  public:
  void clear_weapons();
  ::tutorial::Person_State_Weapon* mutable_weapons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Person_State_Weapon >*
      mutable_weapons();
  private:
  const ::tutorial::Person_State_Weapon& _internal_weapons(int index) const;
  ::tutorial::Person_State_Weapon* _internal_add_weapons();
  public:
  const ::tutorial::Person_State_Weapon& weapons(int index) const;
  ::tutorial::Person_State_Weapon* add_weapons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Person_State_Weapon >&
      weapons() const;

  // optional string player_name = 2;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // optional string current_weapon = 3;
  bool has_current_weapon() const;
  private:
  bool _internal_has_current_weapon() const;
  public:
  void clear_current_weapon();
  const std::string& current_weapon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current_weapon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current_weapon();
  PROTOBUF_NODISCARD std::string* release_current_weapon();
  void set_allocated_current_weapon(std::string* current_weapon);
  private:
  const std::string& _internal_current_weapon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_weapon(const std::string& value);
  std::string* _internal_mutable_current_weapon();
  public:

  // required int32 player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // optional int32 player_hp = 6;
  bool has_player_hp() const;
  private:
  bool _internal_has_player_hp() const;
  public:
  void clear_player_hp();
  int32_t player_hp() const;
  void set_player_hp(int32_t value);
  private:
  int32_t _internal_player_hp() const;
  void _internal_set_player_hp(int32_t value);
  public:

  // optional int32 player_armor = 7;
  bool has_player_armor() const;
  private:
  bool _internal_has_player_armor() const;
  public:
  void clear_player_armor();
  int32_t player_armor() const;
  void set_player_armor(int32_t value);
  private:
  int32_t _internal_player_armor() const;
  void _internal_set_player_armor(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.Person_State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Person_State_Weapon2bulletEntry_DoNotUse,
      std::string, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> weapon2bullet_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > player_position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Person_State_Weapon > weapons_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_weapon_;
  int32_t player_id_;
  int32_t player_hp_;
  int32_t player_armor_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class Gamer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Gamer) */ {
 public:
  inline Gamer() : Gamer(nullptr) {}
  ~Gamer() override;
  explicit constexpr Gamer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gamer(const Gamer& from);
  Gamer(Gamer&& from) noexcept
    : Gamer() {
    *this = ::std::move(from);
  }

  inline Gamer& operator=(const Gamer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gamer& operator=(Gamer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gamer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gamer* internal_default_instance() {
    return reinterpret_cast<const Gamer*>(
               &_Gamer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Gamer& a, Gamer& b) {
    a.Swap(&b);
  }
  inline void Swap(Gamer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gamer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gamer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gamer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Gamer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Gamer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gamer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Gamer";
  }
  protected:
  explicit Gamer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonFieldNumber = 1,
  };
  // repeated .tutorial.Person_State person = 1;
  int person_size() const;
  private:
  int _internal_person_size() const;
  public:
  void clear_person();
  ::tutorial::Person_State* mutable_person(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Person_State >*
      mutable_person();
  private:
  const ::tutorial::Person_State& _internal_person(int index) const;
  ::tutorial::Person_State* _internal_add_person();
  public:
  const ::tutorial::Person_State& person(int index) const;
  ::tutorial::Person_State* add_person();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Person_State >&
      person() const;

  // @@protoc_insertion_point(class_scope:tutorial.Gamer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Person_State > person_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Person_State_Weapon

// optional string Weapon_name = 1;
inline bool Person_State_Weapon::_internal_has_weapon_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Person_State_Weapon::has_weapon_name() const {
  return _internal_has_weapon_name();
}
inline void Person_State_Weapon::clear_weapon_name() {
  weapon_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Person_State_Weapon::weapon_name() const {
  // @@protoc_insertion_point(field_get:tutorial.Person_State.Weapon.Weapon_name)
  return _internal_weapon_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Person_State_Weapon::set_weapon_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 weapon_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.Person_State.Weapon.Weapon_name)
}
inline std::string* Person_State_Weapon::mutable_weapon_name() {
  std::string* _s = _internal_mutable_weapon_name();
  // @@protoc_insertion_point(field_mutable:tutorial.Person_State.Weapon.Weapon_name)
  return _s;
}
inline const std::string& Person_State_Weapon::_internal_weapon_name() const {
  return weapon_name_.Get();
}
inline void Person_State_Weapon::_internal_set_weapon_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  weapon_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Person_State_Weapon::_internal_mutable_weapon_name() {
  _has_bits_[0] |= 0x00000001u;
  return weapon_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Person_State_Weapon::release_weapon_name() {
  // @@protoc_insertion_point(field_release:tutorial.Person_State.Weapon.Weapon_name)
  if (!_internal_has_weapon_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = weapon_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (weapon_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    weapon_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Person_State_Weapon::set_allocated_weapon_name(std::string* weapon_name) {
  if (weapon_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  weapon_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weapon_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (weapon_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    weapon_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.Person_State.Weapon.Weapon_name)
}

// optional int32 bullet = 2;
inline bool Person_State_Weapon::_internal_has_bullet() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Person_State_Weapon::has_bullet() const {
  return _internal_has_bullet();
}
inline void Person_State_Weapon::clear_bullet() {
  bullet_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Person_State_Weapon::_internal_bullet() const {
  return bullet_;
}
inline int32_t Person_State_Weapon::bullet() const {
  // @@protoc_insertion_point(field_get:tutorial.Person_State.Weapon.bullet)
  return _internal_bullet();
}
inline void Person_State_Weapon::_internal_set_bullet(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  bullet_ = value;
}
inline void Person_State_Weapon::set_bullet(int32_t value) {
  _internal_set_bullet(value);
  // @@protoc_insertion_point(field_set:tutorial.Person_State.Weapon.bullet)
}

// -------------------------------------------------------------------

// Person_State

// required int32 player_id = 1;
inline bool Person_State::_internal_has_player_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Person_State::has_player_id() const {
  return _internal_has_player_id();
}
inline void Person_State::clear_player_id() {
  player_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t Person_State::_internal_player_id() const {
  return player_id_;
}
inline int32_t Person_State::player_id() const {
  // @@protoc_insertion_point(field_get:tutorial.Person_State.player_id)
  return _internal_player_id();
}
inline void Person_State::_internal_set_player_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  player_id_ = value;
}
inline void Person_State::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:tutorial.Person_State.player_id)
}

// optional string player_name = 2;
inline bool Person_State::_internal_has_player_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Person_State::has_player_name() const {
  return _internal_has_player_name();
}
inline void Person_State::clear_player_name() {
  player_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Person_State::player_name() const {
  // @@protoc_insertion_point(field_get:tutorial.Person_State.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Person_State::set_player_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.Person_State.player_name)
}
inline std::string* Person_State::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:tutorial.Person_State.player_name)
  return _s;
}
inline const std::string& Person_State::_internal_player_name() const {
  return player_name_.Get();
}
inline void Person_State::_internal_set_player_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Person_State::_internal_mutable_player_name() {
  _has_bits_[0] |= 0x00000001u;
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Person_State::release_player_name() {
  // @@protoc_insertion_point(field_release:tutorial.Person_State.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = player_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (player_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Person_State::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (player_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.Person_State.player_name)
}

// optional string current_weapon = 3;
inline bool Person_State::_internal_has_current_weapon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Person_State::has_current_weapon() const {
  return _internal_has_current_weapon();
}
inline void Person_State::clear_current_weapon() {
  current_weapon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Person_State::current_weapon() const {
  // @@protoc_insertion_point(field_get:tutorial.Person_State.current_weapon)
  return _internal_current_weapon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Person_State::set_current_weapon(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 current_weapon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.Person_State.current_weapon)
}
inline std::string* Person_State::mutable_current_weapon() {
  std::string* _s = _internal_mutable_current_weapon();
  // @@protoc_insertion_point(field_mutable:tutorial.Person_State.current_weapon)
  return _s;
}
inline const std::string& Person_State::_internal_current_weapon() const {
  return current_weapon_.Get();
}
inline void Person_State::_internal_set_current_weapon(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  current_weapon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Person_State::_internal_mutable_current_weapon() {
  _has_bits_[0] |= 0x00000002u;
  return current_weapon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Person_State::release_current_weapon() {
  // @@protoc_insertion_point(field_release:tutorial.Person_State.current_weapon)
  if (!_internal_has_current_weapon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = current_weapon_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (current_weapon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    current_weapon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Person_State::set_allocated_current_weapon(std::string* current_weapon) {
  if (current_weapon != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  current_weapon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_weapon,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (current_weapon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    current_weapon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.Person_State.current_weapon)
}

// map<string, int32> weapon2bullet = 4;
inline int Person_State::_internal_weapon2bullet_size() const {
  return weapon2bullet_.size();
}
inline int Person_State::weapon2bullet_size() const {
  return _internal_weapon2bullet_size();
}
inline void Person_State::clear_weapon2bullet() {
  weapon2bullet_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
Person_State::_internal_weapon2bullet() const {
  return weapon2bullet_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
Person_State::weapon2bullet() const {
  // @@protoc_insertion_point(field_map:tutorial.Person_State.weapon2bullet)
  return _internal_weapon2bullet();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
Person_State::_internal_mutable_weapon2bullet() {
  return weapon2bullet_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
Person_State::mutable_weapon2bullet() {
  // @@protoc_insertion_point(field_mutable_map:tutorial.Person_State.weapon2bullet)
  return _internal_mutable_weapon2bullet();
}

// repeated float player_position = 5;
inline int Person_State::_internal_player_position_size() const {
  return player_position_.size();
}
inline int Person_State::player_position_size() const {
  return _internal_player_position_size();
}
inline void Person_State::clear_player_position() {
  player_position_.Clear();
}
inline float Person_State::_internal_player_position(int index) const {
  return player_position_.Get(index);
}
inline float Person_State::player_position(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Person_State.player_position)
  return _internal_player_position(index);
}
inline void Person_State::set_player_position(int index, float value) {
  player_position_.Set(index, value);
  // @@protoc_insertion_point(field_set:tutorial.Person_State.player_position)
}
inline void Person_State::_internal_add_player_position(float value) {
  player_position_.Add(value);
}
inline void Person_State::add_player_position(float value) {
  _internal_add_player_position(value);
  // @@protoc_insertion_point(field_add:tutorial.Person_State.player_position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Person_State::_internal_player_position() const {
  return player_position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Person_State::player_position() const {
  // @@protoc_insertion_point(field_list:tutorial.Person_State.player_position)
  return _internal_player_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Person_State::_internal_mutable_player_position() {
  return &player_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Person_State::mutable_player_position() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Person_State.player_position)
  return _internal_mutable_player_position();
}

// optional int32 player_hp = 6;
inline bool Person_State::_internal_has_player_hp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Person_State::has_player_hp() const {
  return _internal_has_player_hp();
}
inline void Person_State::clear_player_hp() {
  player_hp_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t Person_State::_internal_player_hp() const {
  return player_hp_;
}
inline int32_t Person_State::player_hp() const {
  // @@protoc_insertion_point(field_get:tutorial.Person_State.player_hp)
  return _internal_player_hp();
}
inline void Person_State::_internal_set_player_hp(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  player_hp_ = value;
}
inline void Person_State::set_player_hp(int32_t value) {
  _internal_set_player_hp(value);
  // @@protoc_insertion_point(field_set:tutorial.Person_State.player_hp)
}

// optional int32 player_armor = 7;
inline bool Person_State::_internal_has_player_armor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Person_State::has_player_armor() const {
  return _internal_has_player_armor();
}
inline void Person_State::clear_player_armor() {
  player_armor_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t Person_State::_internal_player_armor() const {
  return player_armor_;
}
inline int32_t Person_State::player_armor() const {
  // @@protoc_insertion_point(field_get:tutorial.Person_State.player_armor)
  return _internal_player_armor();
}
inline void Person_State::_internal_set_player_armor(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  player_armor_ = value;
}
inline void Person_State::set_player_armor(int32_t value) {
  _internal_set_player_armor(value);
  // @@protoc_insertion_point(field_set:tutorial.Person_State.player_armor)
}

// repeated .tutorial.Person_State.Weapon weapons = 8;
inline int Person_State::_internal_weapons_size() const {
  return weapons_.size();
}
inline int Person_State::weapons_size() const {
  return _internal_weapons_size();
}
inline void Person_State::clear_weapons() {
  weapons_.Clear();
}
inline ::tutorial::Person_State_Weapon* Person_State::mutable_weapons(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.Person_State.weapons)
  return weapons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Person_State_Weapon >*
Person_State::mutable_weapons() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Person_State.weapons)
  return &weapons_;
}
inline const ::tutorial::Person_State_Weapon& Person_State::_internal_weapons(int index) const {
  return weapons_.Get(index);
}
inline const ::tutorial::Person_State_Weapon& Person_State::weapons(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Person_State.weapons)
  return _internal_weapons(index);
}
inline ::tutorial::Person_State_Weapon* Person_State::_internal_add_weapons() {
  return weapons_.Add();
}
inline ::tutorial::Person_State_Weapon* Person_State::add_weapons() {
  ::tutorial::Person_State_Weapon* _add = _internal_add_weapons();
  // @@protoc_insertion_point(field_add:tutorial.Person_State.weapons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Person_State_Weapon >&
Person_State::weapons() const {
  // @@protoc_insertion_point(field_list:tutorial.Person_State.weapons)
  return weapons_;
}

// -------------------------------------------------------------------

// Gamer

// repeated .tutorial.Person_State person = 1;
inline int Gamer::_internal_person_size() const {
  return person_.size();
}
inline int Gamer::person_size() const {
  return _internal_person_size();
}
inline void Gamer::clear_person() {
  person_.Clear();
}
inline ::tutorial::Person_State* Gamer::mutable_person(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.Gamer.person)
  return person_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Person_State >*
Gamer::mutable_person() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Gamer.person)
  return &person_;
}
inline const ::tutorial::Person_State& Gamer::_internal_person(int index) const {
  return person_.Get(index);
}
inline const ::tutorial::Person_State& Gamer::person(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Gamer.person)
  return _internal_person(index);
}
inline ::tutorial::Person_State* Gamer::_internal_add_person() {
  return person_.Add();
}
inline ::tutorial::Person_State* Gamer::add_person() {
  ::tutorial::Person_State* _add = _internal_add_person();
  // @@protoc_insertion_point(field_add:tutorial.Gamer.person)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Person_State >&
Gamer::person() const {
  // @@protoc_insertion_point(field_list:tutorial.Gamer.person)
  return person_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tutorial::Person_State_Camp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tutorial::Person_State_Camp>() {
  return ::tutorial::Person_State_Camp_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto
